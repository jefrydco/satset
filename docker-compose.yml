version: "3"

services:
  redis:
    container_name: redis
    hostname: redis
    image: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - app_network
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8081:8081
    networks:
      - app_network
  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=lighthouse
    networks:
      - app_network
  mongo-express:
    container_name: mongo-express
    hostname: mongo-express
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin123@mongo:27017/
    networks:
      - app_network
  # web:
  #   container_name: web
  #   build:
  #     context: .
  #     dockerfile: ./apps/web/Dockerfile
  #   restart: always
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - app_network
  # api-nest:
  #   container_name: api-nest
  #   build:
  #     context: .
  #     dockerfile: ./apps/api-nest/Dockerfile
  #   restart: always
  #   ports:
  #     - 3001:3001
  #   networks:
  #     - app_network

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
    external: true
